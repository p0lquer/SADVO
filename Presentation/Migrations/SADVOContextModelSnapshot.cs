// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SADVO.Persistence.Context;

#nullable disable

namespace SADVOWeb.Migrations
{
    [DbContext(typeof(SADVOContext))]
    partial class SADVOContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EleccionPuestos", b =>
                {
                    b.Property<int>("EleccionId")
                        .HasColumnType("int");

                    b.Property<int>("PuestoElectivoId")
                        .HasColumnType("int");

                    b.HasKey("EleccionId", "PuestoElectivoId");

                    b.HasIndex("PuestoElectivoId");

                    b.ToTable("EleccionPuestos", (string)null);
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Alianzas_Politica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime");

                    b.Property<int>("PartidoReceptorId")
                        .HasColumnType("int");

                    b.Property<int>("PartidoSolicitanteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartidoReceptorId");

                    b.HasIndex("PartidoSolicitanteId", "PartidoReceptorId")
                        .IsUnique();

                    b.ToTable("AlianzasPoliticas", (string)null);
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Asignar_Candidato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidatoId")
                        .HasColumnType("int");

                    b.Property<int>("PartidoPoliticoId")
                        .HasColumnType("int");

                    b.Property<int>("PuestoElectivoId")
                        .HasColumnType("int");

                    b.Property<int>("Tipo_Candidato")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidatoId");

                    b.HasIndex("PuestoElectivoId");

                    b.HasIndex("PartidoPoliticoId", "PuestoElectivoId")
                        .IsUnique();

                    b.ToTable("AsignacionesCandidatos", (string)null);
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Candidato", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EsActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Foto");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PartidoId")
                        .HasColumnType("int");

                    b.Property<int?>("PuestoElectivoId")
                        .HasColumnType("int");

                    b.Property<int>("TypeCandidate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PuestoElectivoId");

                    b.ToTable("Candidatos", (string)null);
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Ciudadano", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EsActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NumeroIdentificacion")
                        .IsUnique();

                    b.ToTable("Ciudadanos", (string)null);
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Dirigente_Politico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PartidoPoliticoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartidoPoliticoId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.HasIndex("UsuariosId");

                    b.ToTable("AsignacionesDirigentes", (string)null);
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Eleccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaOcurrida")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartidoPoliticoId")
                        .HasColumnType("int");

                    b.Property<int>("typeCandidate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartidoPoliticoId");

                    b.ToTable("Elecciones");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Partido_Politico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Logo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Siglas")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Siglas")
                        .IsUnique();

                    b.ToTable("PartidosPoliticos", (string)null);
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Puesto_Electivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PuestosElectivos", (string)null);
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Voto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CiudadanoId")
                        .HasColumnType("int");

                    b.Property<int>("EleccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CiudadanoId");

                    b.HasIndex("EleccionId");

                    b.ToTable("Votos", (string)null);
                });

            modelBuilder.Entity("EleccionPuestos", b =>
                {
                    b.HasOne("SADVO.Domain.Entities.Eleccion", null)
                        .WithMany()
                        .HasForeignKey("EleccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SADVO.Domain.Entities.Puesto_Electivo", null)
                        .WithMany()
                        .HasForeignKey("PuestoElectivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Alianzas_Politica", b =>
                {
                    b.HasOne("SADVO.Domain.Entities.Partido_Politico", "PartidoReceptor")
                        .WithMany("AlianzasRecibidas")
                        .HasForeignKey("PartidoReceptorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SADVO.Domain.Entities.Partido_Politico", "PartidoSolicitante")
                        .WithMany("AlianzasSolicitadas")
                        .HasForeignKey("PartidoSolicitanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PartidoReceptor");

                    b.Navigation("PartidoSolicitante");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Asignar_Candidato", b =>
                {
                    b.HasOne("SADVO.Domain.Entities.Candidato", "Candidato")
                        .WithMany("Asignar_Candidato")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SADVO.Domain.Entities.Partido_Politico", "PartidoPolitico")
                        .WithMany()
                        .HasForeignKey("PartidoPoliticoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SADVO.Domain.Entities.Puesto_Electivo", "_Electivo")
                        .WithMany()
                        .HasForeignKey("PuestoElectivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidato");

                    b.Navigation("PartidoPolitico");

                    b.Navigation("_Electivo");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Candidato", b =>
                {
                    b.HasOne("SADVO.Domain.Entities.Partido_Politico", "Partido")
                        .WithMany("Candidatos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SADVO.Domain.Entities.Puesto_Electivo", "Puesto_Electivo")
                        .WithMany("Candidatos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SADVO.Domain.Entities.Puesto_Electivo", "PuestoElectivo")
                        .WithMany()
                        .HasForeignKey("PuestoElectivoId");

                    b.Navigation("Partido");

                    b.Navigation("PuestoElectivo");

                    b.Navigation("Puesto_Electivo");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Dirigente_Politico", b =>
                {
                    b.HasOne("SADVO.Domain.Entities.Partido_Politico", "PartidoPolitico")
                        .WithMany("DirigentePoliticos")
                        .HasForeignKey("PartidoPoliticoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SADVO.Domain.Entities.Usuarios", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SADVO.Domain.Entities.Usuarios", null)
                        .WithMany("DirigentePoliticos")
                        .HasForeignKey("UsuariosId");

                    b.Navigation("PartidoPolitico");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Eleccion", b =>
                {
                    b.HasOne("SADVO.Domain.Entities.Partido_Politico", "PartidoPolitico")
                        .WithMany()
                        .HasForeignKey("PartidoPoliticoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartidoPolitico");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Voto", b =>
                {
                    b.HasOne("SADVO.Domain.Entities.Ciudadano", "Ciudadano")
                        .WithMany()
                        .HasForeignKey("CiudadanoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SADVO.Domain.Entities.Eleccion", "Eleccion")
                        .WithMany()
                        .HasForeignKey("EleccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudadano");

                    b.Navigation("Eleccion");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Candidato", b =>
                {
                    b.Navigation("Asignar_Candidato");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Partido_Politico", b =>
                {
                    b.Navigation("AlianzasRecibidas");

                    b.Navigation("AlianzasSolicitadas");

                    b.Navigation("Candidatos");

                    b.Navigation("DirigentePoliticos");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Puesto_Electivo", b =>
                {
                    b.Navigation("Candidatos");
                });

            modelBuilder.Entity("SADVO.Domain.Entities.Usuarios", b =>
                {
                    b.Navigation("DirigentePoliticos");
                });
#pragma warning restore 612, 618
        }
    }
}
